// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String
  accountId            String
  accessToken          String?   @db.Text
  refreshToken         String?   @db.Text
  idToken              String?   @db.Text
  accessTokenExpiresAt DateTime?
  password             String?   @db.Text
  scope                String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?   
  emailVerified Boolean?   
  role          String?   @default("user")
  image         String? 
  accounts      Account[]
  
  sessions      Session[]
  uploadedImages Image[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token     String?   @db.Text
  ipAddress String?
  userAgent String?   @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  token      String?  @unique
  value      String?  @db.Text
  expiresAt  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([identifier, token])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}

model Image {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  s3Key       String   @unique
  s3Url       String
  cloudFrontUrl String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@map("image")
}


